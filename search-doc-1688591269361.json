[{"title":"Transition","type":0,"sectionRef":"#","url":"/RobloxStateMachine/api/Transition","content":"","keywords":""},{"title":"Functions​","type":1,"pageTitle":"Transition","url":"/RobloxStateMachine/api/Transition#functions","content":" "},{"title":"new​","type":1,"pageTitle":"Transition","url":"/RobloxStateMachine/api/Transition#new","content":"&lt;/&gt; Transition.new( targetState: string?-- The state the transition will change to when it meets the requirements ) → Transition Creates a new transition. Transitions are used to tell our state when and how should it move from the current state to a different one. They are meant to be reusable and allow us to easily add and reuse transitions between states and objects local ReplicatedStorage = game:GetService(&quot;ReplicatedStorage&quot;) local StateMachine = require(ReplicatedStorage.RobloxStateMachine) local Transition = StateMachine.Transition local GoToBlue = Transition.new(&quot;Blue&quot;) GoToBlue.OnHearbeat = false function GoToBlue:OnDataChanged(data) return tick() - data.time &gt; 10 -- Will change to blue after 10 seconds end return GoToBlue   "},{"title":"CanChangeState​","type":1,"pageTitle":"Transition","url":"/RobloxStateMachine/api/Transition#CanChangeState","content":"&lt;/&gt; Transition:CanChangeState(data: {[string]: any}) → boolean-- By default it returns true  info This is a Virtual Method. Virtual Methods are meant to be overwritten Whether it can change to this state or not. It's a good way to lock the current state  "},{"title":"OnDataChanged​","type":1,"pageTitle":"Transition","url":"/RobloxStateMachine/api/Transition#OnDataChanged","content":"&lt;/&gt; Transition:OnDataChanged(data: {[string]: any}) → boolean-- By default it returns false  info This is a Virtual Method. Virtual Methods are meant to be overwritten Should return true if it should change to the target state and false if it shouldn't "},{"title":"State","type":0,"sectionRef":"#","url":"/RobloxStateMachine/api/State","content":"","keywords":""},{"title":"Functions​","type":1,"pageTitle":"State","url":"/RobloxStateMachine/api/State#functions","content":" "},{"title":"new​","type":1,"pageTitle":"State","url":"/RobloxStateMachine/api/State#new","content":"&lt;/&gt; State.new(stateName: string?) → State Used to create a new State. The state should manage how the object should behave during that given state. I personally recommend having your states in their own files for organizational purposes local ReplicatedStorage = game:GetService(&quot;ReplicatedStorage&quot;) local StateMachine = require(ReplicatedStorage.RobloxStateMachine) local State = StateMachine.State local Default = State.new(&quot;Blue&quot;) -- The name of this state is &quot;Blue&quot; Default.Transitions = { -- The transitions that will be listened to while in the blue state transition1, transition2 } function Default:OnEnter(data) data.part.Color = Color3.fromRGB(0, 166, 255) --This will turn the part Blue when it enters the state blue end return Default   "},{"title":"ChangeState​","type":1,"pageTitle":"State","url":"/RobloxStateMachine/api/State#ChangeState","content":"&lt;/&gt; State:ChangeState( newState: string-- The name of the new state ) → () Forcelly changes the current state of our state machine to a new one  "},{"title":"OnInit​","type":1,"pageTitle":"State","url":"/RobloxStateMachine/api/State#OnInit","content":"&lt;/&gt; State:OnInit( data: {[string]: any}-- This is the data from the StateMachine itself! ) → ()  info This is a Virtual Method. Virtual Methods are meant to be overwritten Called whenever a state machine is created with this state. function State:OnInit(data) print(&quot;I was init!&quot;) self.SomeStartingData = tick() end   "},{"title":"OnEnter​","type":1,"pageTitle":"State","url":"/RobloxStateMachine/api/State#OnEnter","content":"&lt;/&gt; State:OnEnter( data: {[string]: any}-- This is the data from the StateMachine itself! ) → ()  info This is a Virtual Method. Virtual Methods are meant to be overwritten Called whenever you enter this state function State:OnEnter(data) data.part.Color = Color3.fromRGB(0, 166, 255) end   "},{"title":"OnHeartbeat​","type":1,"pageTitle":"State","url":"/RobloxStateMachine/api/State#OnHeartbeat","content":"&lt;/&gt; State:OnHeartbeat( data: {[string]: any},-- This is the data from the StateMachine itself! deltaTime: number ) → ()  info This is a Virtual Method. Virtual Methods are meant to be overwritten Called every frame after the physics simulation while in this state function Default:OnHeartbeat(data, deltaTime: number) self.timePassed += deltaTime end   "},{"title":"OnLeave​","type":1,"pageTitle":"State","url":"/RobloxStateMachine/api/State#OnLeave","content":"&lt;/&gt; State:OnLeave( data: {[string]: any}-- This is the data from the StateMachine itself! ) → ()  info This is a Virtual Method. Virtual Methods are meant to be overwritten Called whenever you leave this state function State:OnLeave(data) data.stuff:Clean() end  "},{"title":"StateMachine","type":0,"sectionRef":"#","url":"/RobloxStateMachine/api/StateMachine","content":"","keywords":""},{"title":"Functions​","type":1,"pageTitle":"StateMachine","url":"/RobloxStateMachine/api/StateMachine#functions","content":" "},{"title":"new​","type":1,"pageTitle":"StateMachine","url":"/RobloxStateMachine/api/StateMachine#new","content":"&lt;/&gt; StateMachine.new( initialState: string,-- The name of the state at which it should start states: {State.State},-- An array of the states this state machine should have initialData: {[string]: any}?-- The starting data to be used by the states ) → RobloxStateMachine Used to create a new State Machine. It expects 3 arguments being the third one an optional one local ReplicatedStorage = game:GetService(&quot;ReplicatedStorage&quot;) local RobloxStateMachine = require(ReplicatedStorage.RobloxStateMachine) local exampleStateMachine: RobloxStateMachine.RobloxStateMachine = RobloxStateMachine.new( &quot;Default&quot;, RobloxStateMachine:LoadDirectory(script.Example.States), { part = workspace.Example, time = tick(), } )   "},{"title":"GetCurrentState​","type":1,"pageTitle":"StateMachine","url":"/RobloxStateMachine/api/StateMachine#GetCurrentState","content":"&lt;/&gt; StateMachine:GetCurrentState() → string Returns the current state of the State Machine  "},{"title":"ChangeData​","type":1,"pageTitle":"StateMachine","url":"/RobloxStateMachine/api/StateMachine#ChangeData","content":"&lt;/&gt; StateMachine:ChangeData( index: string, newValue: any ) → () Changing data request. You can also just Get the data and change the data at run time. local stateMachine = RobloxStateMachine.new(&quot;state&quot;, states, {health = 0}) stateMachine:GetData().health = 50 -- This is the same as stateMachine:ChangeData(&quot;Health&quot;, 50) -- this   "},{"title":"GetData​","type":1,"pageTitle":"StateMachine","url":"/RobloxStateMachine/api/StateMachine#GetData","content":"&lt;/&gt; StateMachine:GetData() → {[string]: any} Gets the custom data of this state machine object. local stateMachine = RobloxStateMachine.new(&quot;Start&quot;, {state1, state2}, {health = 20}) print(stateMachine:GetData().health) -- 20   "},{"title":"LoadDirectory​","type":1,"pageTitle":"StateMachine","url":"/RobloxStateMachine/api/StateMachine#LoadDirectory","content":"&lt;/&gt; StateMachine:LoadDirectory(directory: Instance ) → {any} Used to load thru a directory. It's specially useful to load states and or transitions! local exampleStateMachine: RobloxStateMachine.RobloxStateMachine = RobloxStateMachine.new( &quot;Default&quot;, RobloxStateMachine:LoadDirectory(script.Example.States), { part = workspace.Example, time = tick(), } )   "},{"title":"Destroy​","type":1,"pageTitle":"StateMachine","url":"/RobloxStateMachine/api/StateMachine#Destroy","content":"&lt;/&gt; StateMachine:Destroy() → () If you wish to stop using the state machine at any point you should then clear it from the memory. Call Destroy whenever you are done with the state machine. local stateMachine = RobloxStateMachine.new(...) task.wait(5) stateMachine:Destroy()   "},{"title":"ChangeState​","type":1,"pageTitle":"StateMachine","url":"/RobloxStateMachine/api/StateMachine#ChangeState","content":"&lt;/&gt; StateMachine:ChangeState( newState: string-- The name of the new state ) → () Forcelly changes the current state of our state machine to a new one "}]