"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[216],{76191:e=>{e.exports=JSON.parse('{"functions":[{"name":"new","desc":"Creates a new transition. Transitions are used to tell our state\\nwhen and how should it move from the current state to a different one.\\nThey are meant to be reusable and allow us to easily add and reuse transitions\\nbetween states and objects\\n\\n```lua\\nlocal ReplicatedStorage = game:GetService(\\"ReplicatedStorage\\")\\n\\nlocal StateMachine = require(ReplicatedStorage.RobloxStateMachine)\\nlocal Transition = StateMachine.Transition\\n\\nlocal GoToBlue = Transition.new(\\"Blue\\")\\nGoToBlue.OnHearbeat = false\\n\\nfunction GoToBlue:OnDataChanged(data)\\n    return tick() - data.time > 10 -- Will change to blue after 10 seconds \\nend\\n\\nreturn GoToBlue\\n```","params":[{"name":"targetState","desc":"The state the transition will change to when it meets the requirements","lua_type":"string?"}],"returns":[{"desc":"","lua_type":"Transition"}],"function_type":"static","source":{"line":111,"path":"src/StateMachine/Transition.lua"}},{"name":"OnEnter","desc":":::info\\nThis is a **Virtual Method**. Virtual Methods are meant to be overwritten\\n:::\\n\\nCalled whenever you enter this transition object\\n\\n```lua\\nfunction State:OnEnter(data)\\n    data.part.Color = Color3.fromRGB(0, 166, 255)\\nend\\n```","params":[{"name":"_data","desc":"This is the data from the StateMachine itself!","lua_type":"{[string]: any}"}],"returns":[{"desc":"","lua_type":"()"}],"function_type":"method","source":{"line":135,"path":"src/StateMachine/Transition.lua"}},{"name":"OnLeave","desc":":::info\\nThis is a **Virtual Method**. Virtual Methods are meant to be overwritten\\n:::\\n\\nCalled whenever you leave this transition object\\n\\n```lua\\nfunction State:OnLeave(data)\\n    data.stuff:Clean()\\nend\\n```","params":[{"name":"_data","desc":"This is the data from the StateMachine itself!","lua_type":"{[string]: any}"}],"returns":[{"desc":"","lua_type":"()"}],"function_type":"method","source":{"line":156,"path":"src/StateMachine/Transition.lua"}},{"name":"CanChangeState","desc":":::info\\nThis is a **Virtual Method**. Virtual Methods are meant to be overwritten\\n:::\\n\\nWhether it can change to this state or not. It\'s a good way to lock the current state","params":[{"name":"data","desc":"","lua_type":"{[string]: any}"}],"returns":[{"desc":"By default it returns true","lua_type":"boolean"}],"function_type":"method","source":{"line":172,"path":"src/StateMachine/Transition.lua"}},{"name":"ChangeState","desc":"Forcelly changes the current state of our state machine to a new one","params":[{"name":"newState","desc":"The name of the new state","lua_type":"string"}],"returns":[{"desc":"","lua_type":"()"}],"function_type":"method","source":{"line":184,"path":"src/StateMachine/Transition.lua"}},{"name":"OnDataChanged","desc":":::info\\nThis is a **Virtual Method**. Virtual Methods are meant to be overwritten\\n:::\\n\\nShould return true if it should change to the target state\\nand false if it shouldn\'t","params":[{"name":"data","desc":"","lua_type":"{[string]: any}"}],"returns":[{"desc":"By default it returns false","lua_type":"boolean"}],"function_type":"method","source":{"line":204,"path":"src/StateMachine/Transition.lua"}},{"name":"GetState","desc":"Gets the current state of our state machine","params":[],"returns":[{"desc":"","lua_type":"string"}],"function_type":"method","source":{"line":214,"path":"src/StateMachine/Transition.lua"}},{"name":"GetPreviousState","desc":"Gets the previous state of our state machine","params":[],"returns":[{"desc":"","lua_type":"string"}],"function_type":"method","source":{"line":227,"path":"src/StateMachine/Transition.lua"}},{"name":"ChangeData","desc":"Changing data request. You can also just Get the data and change the data at run time.\\n\\n```lua\\nlocal example: State = State.new(\\"Blue\\")\\n\\nfunction example:OnEnter(data)\\n    self:ChangeData(\\"color\\", Color3.fromRGB(255, 0, 0)) -- Change to red :D\\n\\n    data.part.Color = data.color\\nend\\n```","params":[{"name":"index","desc":"","lua_type":"string"},{"name":"newValue","desc":"","lua_type":"any"}],"returns":[{"desc":"","lua_type":"()"}],"function_type":"method","source":{"line":253,"path":"src/StateMachine/Transition.lua"}}],"properties":[{"name":"Name","desc":"The name of the state. This is used to identify the state. Usually set while creating the state\\n\\n```lua\\nlocal Transition = StateMachine.Transition\\n\\nlocal GoToBlue = Transition.new(\\"Blue\\")\\nGoToBlue.Name = \\"GoToBlue\\"\\n```","lua_type":"string","source":{"line":22,"path":"src/StateMachine/Transition.lua"}},{"name":"TargetState","desc":"The name of the state. This is used to identify the state. Usually set while creating the state\\n\\n```lua\\nlocal Transition = StateMachine.Transition\\n\\nlocal GoToBlue = Transition.new(\\"Blue\\") -- The target state is now \\"Blue\\"\\nprint(GoToBlue.TargetState) -- \\"Blue\\"\\n```","lua_type":"string","source":{"line":36,"path":"src/StateMachine/Transition.lua"}},{"name":"Data","desc":"Contains the state machine data, it can be accessed from within the class\\n\\n```lua\\nlocal Default: State = State.new(\\"Blue\\")\\n\\nfunction Default:OnInit(data)\\n    print(self.Data)\\nend\\n```","lua_type":"{[string]: any}","source":{"line":51,"path":"src/StateMachine/Transition.lua"}},{"name":"_changeState","desc":"This is used to change the state of the state machine. This is set by the state machine itself","lua_type":"(newState: string)->()?","private":true,"source":{"line":59,"path":"src/StateMachine/Transition.lua"}},{"name":"_changeData","desc":"This is used to change the data of the state machine. This is set by the state machine itself","lua_type":"(index: string, newValue: any)->()?","private":true,"source":{"line":67,"path":"src/StateMachine/Transition.lua"}},{"name":"_getState","desc":"Gets the current state of our state machine","lua_type":"(index: string, newValue: any)-> string","private":true,"source":{"line":75,"path":"src/StateMachine/Transition.lua"}},{"name":"_getPreviousState","desc":"Gets the previous state of our state machine","lua_type":"()-> string?","private":true,"source":{"line":83,"path":"src/StateMachine/Transition.lua"}}],"types":[],"name":"Transition","desc":"Dictates how and when should you move between different states","source":{"line":6,"path":"src/StateMachine/Transition.lua"}}')}}]);