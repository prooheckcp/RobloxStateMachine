"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[957],{69621:e=>{e.exports=JSON.parse('{"functions":[{"name":"new","desc":"Used to create a new State Machine. It expects 3 arguments being the third one an optional one\\n\\n```lua\\nlocal ReplicatedStorage = game:GetService(\\"ReplicatedStorage\\")\\n\\nlocal RobloxStateMachine = require(ReplicatedStorage.RobloxStateMachine)\\n\\nlocal exampleStateMachine: RobloxStateMachine.RobloxStateMachine = RobloxStateMachine.new(\\n    \\"Default\\",\\n    RobloxStateMachine:LoadDirectory(script.Example.States), \\n    {\\n        part = workspace.Example,\\n        time = tick(),\\n    }\\n)\\n```","params":[{"name":"initialState","desc":"The name of the state at which it should start","lua_type":"string"},{"name":"states","desc":"An array of the states this state machine should have","lua_type":"{State.State}"},{"name":"initialData","desc":"The starting data to be used by the states","lua_type":"{[string]: any}?"}],"returns":[{"desc":"","lua_type":"RobloxStateMachine"}],"function_type":"static","source":{"line":173,"path":"src/StateMachine/init.lua"}},{"name":"GetCurrentState","desc":"Returns the current state of the State Machine\\n\\n```lua\\nlocal exampleStateMachine = RobloxStateMachine.new(\\"Default\\", {}, {})\\nprint(exampleStateMachine:GetCurrentState()) -- Default\\n```","params":[],"returns":[{"desc":"","lua_type":"string"}],"function_type":"method","source":{"line":262,"path":"src/StateMachine/init.lua"}},{"name":"GetPreviousState","desc":"Returns the previous state of the State Machine\\n\\n```lua\\nlocal exampleStateMachine = RobloxStateMachine.new(\\"Default\\", {...BlueStateHere}, {})\\nexampleStateMachine:ChangeState(\\"Blue\\")\\nprint(exampleStateMachine:GetPreviousState()) -- \\"Default\\"\\n```","params":[],"returns":[{"desc":"","lua_type":"string"}],"function_type":"method","source":{"line":277,"path":"src/StateMachine/init.lua"}},{"name":"ChangeData","desc":"Changing data request. You can also just Get the data and change the data at run time.\\n\\n```lua\\nlocal stateMachine = RobloxStateMachine.new(\\"state\\", states, {health = 0})\\n\\nstateMachine:GetData().health = 50 -- This is the same as\\nstateMachine:ChangeData(\\"Health\\", 50) -- this\\n```","params":[{"name":"index","desc":"","lua_type":"string"},{"name":"newValue","desc":"","lua_type":"any"}],"returns":[{"desc":"","lua_type":"()"}],"function_type":"method","source":{"line":296,"path":"src/StateMachine/init.lua"}},{"name":"GetData","desc":"Gets the custom data of this state machine object.\\n\\n```lua\\nlocal stateMachine = RobloxStateMachine.new(\\"Start\\", {state1, state2}, {health = 20})\\n\\nprint(stateMachine:GetData().health) -- 20\\n```","params":[],"returns":[{"desc":"","lua_type":"{[string]: any}"}],"function_type":"method","source":{"line":320,"path":"src/StateMachine/init.lua"}},{"name":"LoadDirectory","desc":"Used to load thru a directory. It\'s specially useful to load states and or transitions!\\n\\n```lua\\nlocal exampleStateMachine: RobloxStateMachine.RobloxStateMachine = RobloxStateMachine.new(\\n    \\"Default\\",\\n    RobloxStateMachine:LoadDirectory(script.Example.States), \\n    {\\n        part = workspace.Example,\\n        time = tick(),\\n    }\\n)\\n```\\n\\nYou can also use it to load specific files by feeding the names you wish to load","params":[{"name":"directory","desc":"","lua_type":"Instance"},{"name":"names","desc":"If you wish to only load specific states you can pass an array of names","lua_type":"{string}?"}],"returns":[{"desc":"","lua_type":"{any}"}],"function_type":"method","source":{"line":351,"path":"src/StateMachine/init.lua"}},{"name":"Destroy","desc":"If you wish to stop using the state machine at any point you should then clear\\nit from the memory. Call Destroy whenever you are done with the state machine.\\n\\n```lua\\nlocal stateMachine = RobloxStateMachine.new(...)\\n\\ntask.wait(5)\\n\\nstateMachine:Destroy()\\n```","params":[],"returns":[{"desc":"","lua_type":"()"}],"function_type":"method","source":{"line":412,"path":"src/StateMachine/init.lua"}},{"name":"ChangeState","desc":"Forcelly changes the current state of our state machine to a new one","params":[{"name":"newState","desc":"The name of the new state","lua_type":"string"}],"returns":[{"desc":"","lua_type":"()"}],"function_type":"method","source":{"line":435,"path":"src/StateMachine/init.lua"}},{"name":"_StateExists","desc":"Checks if the state exists","params":[{"name":"stateName","desc":"","lua_type":"string"}],"returns":[{"desc":"","lua_type":"boolean"}],"function_type":"method","private":true,"source":{"line":448,"path":"src/StateMachine/init.lua"}},{"name":"_ChangeState","desc":"Called to change the current state of the state machine","params":[{"name":"newState","desc":"","lua_type":"string"}],"returns":[{"desc":"","lua_type":"()"}],"function_type":"method","private":true,"source":{"line":461,"path":"src/StateMachine/init.lua"}},{"name":"_GetCurrentStateObject","desc":"Gets the current state object of the state machine","params":[],"returns":[{"desc":"","lua_type":"State"}],"function_type":"method","private":true,"source":{"line":500,"path":"src/StateMachine/init.lua"}},{"name":"_CheckTransitions","desc":"Checks if we meet any condition to change the current state.\\nIf any of the transitions returns true then we should change the current state","params":[],"returns":[{"desc":"","lua_type":"()"}],"function_type":"method","private":true,"source":{"line":512,"path":"src/StateMachine/init.lua"}}],"properties":[{"name":"Data","desc":"Contains the data that is shared accross all states and transitions of this state machine. Should be accessed with :GetData\\n\\nE.g\\n```lua\\nlocal stateMachine = RobloxStateMachine.new(\\"state\\", states, {health = 0})\\nstateMachine:GetData().health = 50\\n```\\n\\nThe data is shared accross all states and transitions. It can be access in 2 different ways\\n\\n```lua\\n--transition.lua\\nlocal GoToBlue = Transition.new(\\"Blue\\")\\n\\nfunction GoToBlue:OnDataChanged(data)\\n    print(self.Data, data) -- 2 ways to access the data\\n    return false\\nend\\n\\n--state.lua\\nlocal Default: State = State.new(\\"Blue\\")\\n\\nfunction Default:OnInit(data)\\n    print(self.Data, data)\\nend\\n```","lua_type":"{[string]: any}","source":{"line":60,"path":"src/StateMachine/init.lua"}},{"name":"StateChanged\u26a1","desc":"Called whenever the state of this state machinse changes. The first argument\\nis the new state and the second one is the previous state. If there was no previous state\\nthen it will be an empty string\\n\\ne.g\\n```lua\\nexampleStateMachine.StateChanged:Connect(function(newState: string, previousState: string)\\n    print(\\"Our previous state was: \\" .. previousState .. \\" now our state is: \\" .. newState)\\nend)\\n```","lua_type":"Signal<(string, string)>?","source":{"line":76,"path":"src/StateMachine/init.lua"}},{"name":"DataChanged\u26a1","desc":"Called whenever the data from the state machine gets changed. \\n\\n:::warning\\n**DataChanged** only gets called when the data is changed by a **ChangeData** call\\n:::\\n\\ne.g\\n```lua\\nexampleStateMachine.StateChanged:Connect(function(newState: string, previousState: string)\\n    print(\\"Our previous state was: \\" .. previousState .. \\" now our state is: \\" .. newState)\\nend)\\n```","lua_type":"Signal<({[string]: any}, any, any, any)>?","source":{"line":94,"path":"src/StateMachine/init.lua"}},{"name":"State","desc":"A reference to the State class","lua_type":"State","source":{"line":101,"path":"src/StateMachine/init.lua"}},{"name":"Transition","desc":"A reference to the Transition class","lua_type":"Transition","source":{"line":108,"path":"src/StateMachine/init.lua"}},{"name":"_States","desc":"Caches the states of this state machine. It\'s used to change states and check transitions","lua_type":"{[string]: State}","private":true,"source":{"line":116,"path":"src/StateMachine/init.lua"}},{"name":"_trove","desc":"A trove object to store and clear up connections","lua_type":"Trove","private":true,"source":{"line":124,"path":"src/StateMachine/init.lua"}},{"name":"_CurrentState","desc":"Caches the current state in a string format. It\'s used to fire the StateChanged signal","lua_type":"string","private":true,"source":{"line":132,"path":"src/StateMachine/init.lua"}},{"name":"_PreviousState","desc":"Caches the previous state in a string format. It\'s used to fire the StateChanged signal","lua_type":"string","private":true,"source":{"line":140,"path":"src/StateMachine/init.lua"}},{"name":"_Destroyed","desc":"Checks if the object has already been destroyed or not","lua_type":"boolean","private":true,"source":{"line":148,"path":"src/StateMachine/init.lua"}}],"types":[],"name":"StateMachine","desc":"State Machines consist of state managers that dictate at which state does an object currently meet at.\\nIt allows us to easily manage what should an object do at each given state and when/how it should change\\nbetween them","source":{"line":27,"path":"src/StateMachine/init.lua"}}')}}]);