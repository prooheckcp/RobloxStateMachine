"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[711],{3905:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>f});var r=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=r.createContext({}),c=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},d=function(e){var t=c(e.components);return r.createElement(s.Provider,{value:t},e.children)},p="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},h=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,s=e.parentName,d=l(e,["components","mdxType","originalType","parentName"]),p=c(n),h=a,f=p["".concat(s,".").concat(h)]||p[h]||u[h]||o;return n?r.createElement(f,i(i({ref:t},d),{},{components:n})):r.createElement(f,i({ref:t},d))}));function f(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=h;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[p]="string"==typeof e?e:a,i[1]=l;for(var c=2;c<o;c++)i[c]=n[c];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}h.displayName="MDXCreateElement"},79998:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>u,frontMatter:()=>o,metadata:()=>l,toc:()=>c});var r=n(87462),a=(n(67294),n(3905));const o={sidebar_position:2,sidebar_label:"\ud83d\ude80 Extend States/Transitions"},i="\ud83d\ude80 Extend States/Transitions",l={unversionedId:"AdvancedConcepts/extendStates",id:"AdvancedConcepts/extendStates",title:"\ud83d\ude80 Extend States/Transitions",description:"We can extend classes that share behavior with one another. In fact we do this in one of our examples!",source:"@site/docs/AdvancedConcepts/extendStates.md",sourceDirName:"AdvancedConcepts",slug:"/AdvancedConcepts/extendStates",permalink:"/RobloxStateMachine/docs/AdvancedConcepts/extendStates",draft:!1,editUrl:"https://github.com/prooheckcp/RobloxStateMachine/edit/master/docs/AdvancedConcepts/extendStates.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2,sidebar_label:"\ud83d\ude80 Extend States/Transitions"},sidebar:"defaultSidebar",previous:{title:"\ud83d\udcc2 Load Directories",permalink:"/RobloxStateMachine/docs/AdvancedConcepts/loadDirectories"},next:{title:"\ud83d\uded1 Stop State Transition",permalink:"/RobloxStateMachine/docs/AdvancedConcepts/stopStateTransition"}},s={},c=[],d={toc:c},p="wrapper";function u(e){let{components:t,...n}=e;return(0,a.kt)(p,(0,r.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"-extend-statestransitions"},"\ud83d\ude80 Extend States/Transitions"),(0,a.kt)("p",null,"We can extend classes that share behavior with one another. In fact we do this in one of our examples!"),(0,a.kt)("p",null,"Let's see how this works in practice. First you start by creating a Parent State. This is the state from which other states will be created."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-lua"},'--ChangeColorState.lua\nlocal ReplicatedStorage = game:GetService("ReplicatedStorage")\n\nlocal RobloxStateMachine = require(ReplicatedStorage.RobloxStateMachine)\n\nlocal State = RobloxStateMachine.State\n\nlocal ChangeColorState = State "ChangeColorState"\n\nfunction ChangeColorState:OnInit()\n    self.Color = Color3.fromRGB(255, 255, 255)\nend\n\nfunction ChangeColorState:OnEnter(data)\n    data.part.Color = self.Color\nend\n\nfunction ChangeColorState:OnDestroy()\n    print("Destroy Instance")\nend\n\nreturn ChangeColorState\n')),(0,a.kt)("p",null,"Now that we have our parent class that defines are behavior on which we will be changing the part color to what has been defined in the\ninit function we can now make new states! Let's create a blue and red state"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-lua"},'--Red.lua\nlocal GoToBlue = require(script.Parent.Parent.Transitions.GoToBlue)\nlocal ChangeColorState = require(script.Parent.ChangeColorState)\n\nlocal Red = ChangeColorState:Extend("Red")\nRed.Transitions = {GoToBlue}\n\nfunction Red:OnInit()\n    self.Color = Color3.fromRGB(255, 0, 0)\nend\n\nreturn Red\n')),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-lua"},'--Blue.lua\nlocal GoToRed = require(script.Parent.Parent.Transitions.GoToRed)\nlocal ChangeColorState = require(script.Parent.ChangeColorState)\n\nlocal Blue = ChangeColorState:Extend("Blue")\nBlue.Transitions = {GoToRed}\n\nfunction Blue:OnInit()\n    self.Color = Color3.fromRGB(0, 0, 255)\nend\n\nreturn Blue\n')),(0,a.kt)("p",null,"By doing this we didn't have to define the changing color behavior on both blue and red!"))}u.isMDXComponent=!0}}]);