[{"title":"📂 Load Directories","type":0,"sectionRef":"#","url":"/RobloxStateMachine/docs/AdvancedConcepts/loadDirectories","content":"📂 Load Directories There's a helpful method that allows us to easily load states and transitions called :LoadDirectories. --[[ - src - server - Example - States - Blue.lua - Default.lua ]] local exampleStateMachine = RobloxStateMachine.new( &quot;Default&quot;, RobloxStateMachine:LoadDirectory(script.Example.States), {} ) This code will load all the states from the Example folder into the state machine. And if we want to be more specific we can send the files names as the third argument! local exampleStateMachine = RobloxStateMachine.new( &quot;Default&quot;, RobloxStateMachine:LoadDirectory(script.Example.States, {&quot;Default&quot;}), -- This will only load the Default state! ) ","keywords":""},{"title":"🚀Getting Started","type":0,"sectionRef":"#","url":"/RobloxStateMachine/docs/gettingStarted","content":"","keywords":""},{"title":"📦 Installing​","type":1,"pageTitle":"🚀Getting Started","url":"/RobloxStateMachine/docs/gettingStarted#-installing","content":"RobloxStateMachine can be installed in different ways, depending on your project's needs. Choose the method that suits you best: 🐶 Wally🔨Studio🐙GitHub Watch wally's page robloxstatemachine = &quot;prooheckcp/robloxstatemachine@&gt;0.0.0, &lt;10.0.0&quot;  🚀 Basic Usage Once you have RobloxStateMachine installed, you can start using it in your project. Here's a basic example of how to use it: local ReplicatedStorage = game:GetService(&quot;ReplicatedStorage&quot;) local RobloxStateMachine = require(ReplicatedStorage.RobloxStateMachine) local exampleStateMachine = RobloxStateMachine.new( &quot;InitialState&quot;, -- Sets our initial state to &quot;InitialState&quot; RobloxStateMachine:LoadDirectory( script.Example.States, {&quot;Blue&quot;, &quot;Default&quot;}), -- &quot;Loads the states called &quot;Blue&quot; and &quot;Default&quot; { part = workspace.Example, -- Sends a reference to a part from workspace into the state machine time = tick(), -- Sends the current tick dummyData = &quot;Hello World&quot;, -- Sends a string } )  Looks a bit confusing at the first glance and for that reason we will be showing a very basic example of an implementation. "},{"title":"🤔About","type":0,"sectionRef":"#","url":"/RobloxStateMachine/docs/intro","content":"","keywords":""},{"title":"🔍Why Choose RobloxStateMachine​","type":1,"pageTitle":"🤔About","url":"/RobloxStateMachine/docs/intro#why-choose-robloxstatemachine","content":""},{"title":"🏗️Structure​","type":1,"pageTitle":"🤔About","url":"/RobloxStateMachine/docs/intro#️structure","content":"RSM breaks down the complete logic of an AI into multiple fractions or files. This allows for developers to isolate their code and only work on one logic at a time making it easier to navigate thru large code bases without losing track of their work! "},{"title":"🔌Extensible​","type":1,"pageTitle":"🤔About","url":"/RobloxStateMachine/docs/intro#extensible","content":"With this library it's very easy to add more states and transitions as your project evolves without the need to understand/go thru existing code. "},{"title":"🔧🧹Maintenance​","type":1,"pageTitle":"🤔About","url":"/RobloxStateMachine/docs/intro#maintenance","content":"This library is heavily maintained and will continue to be for a very long time! If any bug ever gets found or feature is requested it will be updated as soon as possible. "},{"title":"🗡️Battle-Scarred​","type":1,"pageTitle":"🤔About","url":"/RobloxStateMachine/docs/intro#️battle-scarred","content":"This library has already been battle-scarred. It was used in many projects many of them amounting many million visits and never broke or had any bug at all. "},{"title":"StateMachine","type":0,"sectionRef":"#","url":"/RobloxStateMachine/api/StateMachine","content":"","keywords":""},{"title":"Properties​","type":1,"pageTitle":"StateMachine","url":"/RobloxStateMachine/api/StateMachine#properties","content":" "},{"title":"Data​","type":1,"pageTitle":"StateMachine","url":"/RobloxStateMachine/api/StateMachine#Data","content":"&lt;/&gt; StateMachine.Data: {[string]: any} Contains the data that is shared accross all states and transitions of this state machine. Should be accessed with :GetData E.g local stateMachine = RobloxStateMachine.new(&quot;state&quot;, states, {health = 0}) stateMachine:GetData().health = 50 The data is shared accross all states and transitions. It can be access in 2 different ways --transition.lua local GoToBlue = Transition.new(&quot;Blue&quot;) function GoToBlue:OnDataChanged(data) print(self.Data, data) -- 2 ways to access the data return false end --state.lua local Default: State = State.new(&quot;Blue&quot;) function Default:OnInit(data) print(self.Data, data) end   "},{"title":"StateChanged⚡​","type":1,"pageTitle":"StateMachine","url":"/RobloxStateMachine/api/StateMachine#StateChanged⚡","content":"&lt;/&gt; StateMachine.StateChanged⚡: Signal&lt;( string, string )&gt;? Called whenever the state of this state machinse changes. The first argument is the new state and the second one is the previous state. If there was no previous state then it will be an empty string e.g exampleStateMachine.StateChanged:Connect(function(newState: string, previousState: string) print(&quot;Our previous state was: &quot; .. previousState .. &quot; now our state is: &quot; .. newState) end)   "},{"title":"DataChanged⚡​","type":1,"pageTitle":"StateMachine","url":"/RobloxStateMachine/api/StateMachine#DataChanged⚡","content":"&lt;/&gt; StateMachine.DataChanged⚡: Signal&lt;( {[string]: any}, any, any, any )&gt;? Called whenever the data from the state machine gets changed. warning DataChanged only gets called when the data is changed by a ChangeData call e.g exampleStateMachine.StateChanged:Connect(function(newState: string, previousState: string) print(&quot;Our previous state was: &quot; .. previousState .. &quot; now our state is: &quot; .. newState) end)   "},{"title":"State​","type":1,"pageTitle":"StateMachine","url":"/RobloxStateMachine/api/StateMachine#State","content":"&lt;/&gt; StateMachine.State: State A reference to the State class  "},{"title":"Transition​","type":1,"pageTitle":"StateMachine","url":"/RobloxStateMachine/api/StateMachine#Transition","content":"&lt;/&gt; StateMachine.Transition: Transition A reference to the Transition class "},{"title":"Functions​","type":1,"pageTitle":"StateMachine","url":"/RobloxStateMachine/api/StateMachine#functions","content":" "},{"title":"new​","type":1,"pageTitle":"StateMachine","url":"/RobloxStateMachine/api/StateMachine#new","content":"&lt;/&gt; StateMachine.new( initialState: string,-- The name of the state at which it should start states: {State.State},-- An array of the states this state machine should have initialData: {[string]: any}?-- The starting data to be used by the states ) → RobloxStateMachine Used to create a new State Machine. It expects 3 arguments being the third one an optional one local ReplicatedStorage = game:GetService(&quot;ReplicatedStorage&quot;) local RobloxStateMachine = require(ReplicatedStorage.RobloxStateMachine) local exampleStateMachine: RobloxStateMachine.RobloxStateMachine = RobloxStateMachine.new( &quot;Default&quot;, RobloxStateMachine:LoadDirectory(script.Example.States), { part = workspace.Example, time = tick(), } )   "},{"title":"GetCurrentState​","type":1,"pageTitle":"StateMachine","url":"/RobloxStateMachine/api/StateMachine#GetCurrentState","content":"&lt;/&gt; StateMachine:GetCurrentState() → string Returns the current state of the State Machine local exampleStateMachine = RobloxStateMachine.new(&quot;Default&quot;, {}, {}) print(exampleStateMachine:GetCurrentState()) -- Default   "},{"title":"GetPreviousState​","type":1,"pageTitle":"StateMachine","url":"/RobloxStateMachine/api/StateMachine#GetPreviousState","content":"&lt;/&gt; StateMachine:GetPreviousState() → string Returns the previous state of the State Machine local exampleStateMachine = RobloxStateMachine.new(&quot;Default&quot;, {...BlueStateHere}, {}) exampleStateMachine:ChangeState(&quot;Blue&quot;) print(exampleStateMachine:GetPreviousState()) -- &quot;Default&quot;   "},{"title":"ChangeData​","type":1,"pageTitle":"StateMachine","url":"/RobloxStateMachine/api/StateMachine#ChangeData","content":"&lt;/&gt; StateMachine:ChangeData( index: string, newValue: any ) → () Changing data request. You can also just Get the data and change the data at run time. local stateMachine = RobloxStateMachine.new(&quot;state&quot;, states, {health = 0}) stateMachine:GetData().health = 50 -- This is the same as stateMachine:ChangeData(&quot;Health&quot;, 50) -- this   "},{"title":"GetData​","type":1,"pageTitle":"StateMachine","url":"/RobloxStateMachine/api/StateMachine#GetData","content":"&lt;/&gt; StateMachine:GetData() → {[string]: any} Gets the custom data of this state machine object. local stateMachine = RobloxStateMachine.new(&quot;Start&quot;, {state1, state2}, {health = 20}) print(stateMachine:GetData().health) -- 20   "},{"title":"LoadDirectory​","type":1,"pageTitle":"StateMachine","url":"/RobloxStateMachine/api/StateMachine#LoadDirectory","content":"&lt;/&gt; StateMachine:LoadDirectory( directory: Instance , names: {string}?-- If you wish to only load specific states you can pass an array of names ) → {any} Used to load thru a directory. It's specially useful to load states and or transitions! local exampleStateMachine: RobloxStateMachine.RobloxStateMachine = RobloxStateMachine.new( &quot;Default&quot;, RobloxStateMachine:LoadDirectory(script.Example.States), { part = workspace.Example, time = tick(), } ) You can also use it to load specific files by feeding the names you wish to load  "},{"title":"Destroy​","type":1,"pageTitle":"StateMachine","url":"/RobloxStateMachine/api/StateMachine#Destroy","content":"&lt;/&gt; StateMachine:Destroy() → () If you wish to stop using the state machine at any point you should then clear it from the memory. Call Destroy whenever you are done with the state machine. local stateMachine = RobloxStateMachine.new(...) task.wait(5) stateMachine:Destroy()   "},{"title":"ChangeState​","type":1,"pageTitle":"StateMachine","url":"/RobloxStateMachine/api/StateMachine#ChangeState","content":"&lt;/&gt; StateMachine:ChangeState( newState: string-- The name of the new state ) → () Forcelly changes the current state of our state machine to a new one "},{"title":"State","type":0,"sectionRef":"#","url":"/RobloxStateMachine/api/State","content":"","keywords":""},{"title":"Properties​","type":1,"pageTitle":"State","url":"/RobloxStateMachine/api/State#properties","content":" "},{"title":"Name​","type":1,"pageTitle":"State","url":"/RobloxStateMachine/api/State#Name","content":"&lt;/&gt; State.Name: string The name of the state. This is used to identify the state. Usually set while creating the state local Blue: State = State.new(&quot;Blue&quot;)   "},{"title":"Transitions​","type":1,"pageTitle":"State","url":"/RobloxStateMachine/api/State#Transitions","content":"&lt;/&gt; State.Transitions: string A reference for the transitions of this state. This is usually set while creating the state local GoToBlue = require(script.Parent.Parent.Transitions.GoToBlue) local State = StateMachine.State local Default = State.new(&quot;Default&quot;) Default.Transitions = {GoToBlue}   "},{"title":"Data​","type":1,"pageTitle":"State","url":"/RobloxStateMachine/api/State#Data","content":"&lt;/&gt; State.Data: {[string]: any} Contains the state machine data, it can be accessed from within the class "},{"title":"Functions​","type":1,"pageTitle":"State","url":"/RobloxStateMachine/api/State#functions","content":" "},{"title":"new​","type":1,"pageTitle":"State","url":"/RobloxStateMachine/api/State#new","content":"&lt;/&gt; State.new(stateName: string?) → State Used to create a new State. The state should manage how the object should behave during that given state. I personally recommend having your states in their own files for organizational purposes local ReplicatedStorage = game:GetService(&quot;ReplicatedStorage&quot;) local StateMachine = require(ReplicatedStorage.RobloxStateMachine) local State = StateMachine.State local Default = State.new(&quot;Blue&quot;) -- The name of this state is &quot;Blue&quot; Default.Transitions = { -- The transitions that will be listened to while in the blue state transition1, transition2 } function Default:OnEnter(data) data.part.Color = Color3.fromRGB(0, 166, 255) --This will turn the part Blue when it enters the state blue end return Default   "},{"title":"ChangeState​","type":1,"pageTitle":"State","url":"/RobloxStateMachine/api/State#ChangeState","content":"&lt;/&gt; State:ChangeState( newState: string-- The name of the new state ) → () Forcelly changes the current state of our state machine to a new one  "},{"title":"GetState​","type":1,"pageTitle":"State","url":"/RobloxStateMachine/api/State#GetState","content":"&lt;/&gt; State:GetState() → string Gets the current state of our state machine  "},{"title":"GetPreviousState​","type":1,"pageTitle":"State","url":"/RobloxStateMachine/api/State#GetPreviousState","content":"&lt;/&gt; State:GetPreviousState() → string Gets the previous state of our state machine  "},{"title":"ChangeData​","type":1,"pageTitle":"State","url":"/RobloxStateMachine/api/State#ChangeData","content":"&lt;/&gt; State:ChangeData( index: string, newValue: any ) → () Changing data request. You can also just Get the data and change the data at run time. local example: State = State.new(&quot;Blue&quot;) function example:OnEnter(data) self:ChangeData(&quot;color&quot;, Color3.fromRGB(255, 0, 0)) -- Change to red :D data.part.Color = data.color end   "},{"title":"OnInit​","type":1,"pageTitle":"State","url":"/RobloxStateMachine/api/State#OnInit","content":"&lt;/&gt; State:OnInit( _data: {[string]: any}-- This is the data from the StateMachine itself! ) → ()  info This is a Virtual Method. Virtual Methods are meant to be overwritten Called whenever a state machine is created with this state. function State:OnInit(data) print(&quot;I was init!&quot;) self.SomeStartingData = tick() end   "},{"title":"OnDataChanged​","type":1,"pageTitle":"State","url":"/RobloxStateMachine/api/State#OnDataChanged","content":"&lt;/&gt; State:OnDataChanged( _data: {[string]: any},-- This is the data from the StateMachine itself! _index: any,-- The index of the data that changed _value: any,-- The new value of the data _oldValue: any-- The old value of the data ) → ()  info This is a Virtual Method. Virtual Methods are meant to be overwritten warning OnDataChanged only gets called when the data is changed by a ChangeData call Called whenever the data of the state machine changes. function State:OnDataChanged(data, index, newValue, oldValue) if index == &quot;SomeStartingData&quot; then self.SomeStartingData = value end end   "},{"title":"OnEnter​","type":1,"pageTitle":"State","url":"/RobloxStateMachine/api/State#OnEnter","content":"&lt;/&gt; State:OnEnter( _data: {[string]: any}-- This is the data from the StateMachine itself! ) → ()  info This is a Virtual Method. Virtual Methods are meant to be overwritten Called whenever you enter this state function State:OnEnter(data) data.part.Color = Color3.fromRGB(0, 166, 255) end   "},{"title":"OnHeartbeat​","type":1,"pageTitle":"State","url":"/RobloxStateMachine/api/State#OnHeartbeat","content":"&lt;/&gt; State:OnHeartbeat( _data: {[string]: any},-- This is the data from the StateMachine itself! _deltaTime: number ) → ()  info This is a Virtual Method. Virtual Methods are meant to be overwritten Called every frame after the physics simulation while in this state function Default:OnHeartbeat(data, deltaTime: number) self.timePassed += deltaTime end   "},{"title":"OnLeave​","type":1,"pageTitle":"State","url":"/RobloxStateMachine/api/State#OnLeave","content":"&lt;/&gt; State:OnLeave( _data: {[string]: any}-- This is the data from the StateMachine itself! ) → ()  info This is a Virtual Method. Virtual Methods are meant to be overwritten Called whenever you leave this state function State:OnLeave(data) data.stuff:Clean() end  "},{"title":"Transition","type":0,"sectionRef":"#","url":"/RobloxStateMachine/api/Transition","content":"","keywords":""},{"title":"Properties​","type":1,"pageTitle":"Transition","url":"/RobloxStateMachine/api/Transition#properties","content":" "},{"title":"Name​","type":1,"pageTitle":"Transition","url":"/RobloxStateMachine/api/Transition#Name","content":"&lt;/&gt; Transition.Name: string The name of the state. This is used to identify the state. Usually set while creating the state local Transition = StateMachine.Transition local GoToBlue = Transition.new(&quot;Blue&quot;) GoToBlue.Name = &quot;GoToBlue&quot;   "},{"title":"TargetState​","type":1,"pageTitle":"Transition","url":"/RobloxStateMachine/api/Transition#TargetState","content":"&lt;/&gt; Transition.TargetState: string The name of the state. This is used to identify the state. Usually set while creating the state local Transition = StateMachine.Transition local GoToBlue = Transition.new(&quot;Blue&quot;) -- The target state is now &quot;Blue&quot; print(GoToBlue.TargetState) -- &quot;Blue&quot;   "},{"title":"Data​","type":1,"pageTitle":"Transition","url":"/RobloxStateMachine/api/Transition#Data","content":"&lt;/&gt; Transition.Data: {[string]: any} Contains the state machine data, it can be accessed from within the class local Default: State = State.new(&quot;Blue&quot;) function Default:OnInit(data) print(self.Data) end  "},{"title":"Functions​","type":1,"pageTitle":"Transition","url":"/RobloxStateMachine/api/Transition#functions","content":" "},{"title":"new​","type":1,"pageTitle":"Transition","url":"/RobloxStateMachine/api/Transition#new","content":"&lt;/&gt; Transition.new( targetState: string?-- The state the transition will change to when it meets the requirements ) → Transition Creates a new transition. Transitions are used to tell our state when and how should it move from the current state to a different one. They are meant to be reusable and allow us to easily add and reuse transitions between states and objects local ReplicatedStorage = game:GetService(&quot;ReplicatedStorage&quot;) local StateMachine = require(ReplicatedStorage.RobloxStateMachine) local Transition = StateMachine.Transition local GoToBlue = Transition.new(&quot;Blue&quot;) GoToBlue.OnHearbeat = false function GoToBlue:OnDataChanged(data) return tick() - data.time &gt; 10 -- Will change to blue after 10 seconds end return GoToBlue   "},{"title":"OnEnter​","type":1,"pageTitle":"Transition","url":"/RobloxStateMachine/api/Transition#OnEnter","content":"&lt;/&gt; Transition:OnEnter( _data: {[string]: any}-- This is the data from the StateMachine itself! ) → ()  info This is a Virtual Method. Virtual Methods are meant to be overwritten Called whenever you enter this transition object function State:OnEnter(data) data.part.Color = Color3.fromRGB(0, 166, 255) end   "},{"title":"OnLeave​","type":1,"pageTitle":"Transition","url":"/RobloxStateMachine/api/Transition#OnLeave","content":"&lt;/&gt; Transition:OnLeave( _data: {[string]: any}-- This is the data from the StateMachine itself! ) → ()  info This is a Virtual Method. Virtual Methods are meant to be overwritten Called whenever you leave this transition object function State:OnLeave(data) data.stuff:Clean() end   "},{"title":"CanChangeState​","type":1,"pageTitle":"Transition","url":"/RobloxStateMachine/api/Transition#CanChangeState","content":"&lt;/&gt; Transition:CanChangeState(data: {[string]: any}) → boolean-- By default it returns true  info This is a Virtual Method. Virtual Methods are meant to be overwritten Whether it can change to this state or not. It's a good way to lock the current state  "},{"title":"ChangeState​","type":1,"pageTitle":"Transition","url":"/RobloxStateMachine/api/Transition#ChangeState","content":"&lt;/&gt; Transition:ChangeState( newState: string-- The name of the new state ) → () Forcelly changes the current state of our state machine to a new one  "},{"title":"OnDataChanged​","type":1,"pageTitle":"Transition","url":"/RobloxStateMachine/api/Transition#OnDataChanged","content":"&lt;/&gt; Transition:OnDataChanged(data: {[string]: any}) → boolean-- By default it returns false  info This is a Virtual Method. Virtual Methods are meant to be overwritten Should return true if it should change to the target state and false if it shouldn't  "},{"title":"GetState​","type":1,"pageTitle":"Transition","url":"/RobloxStateMachine/api/Transition#GetState","content":"&lt;/&gt; Transition:GetState() → string Gets the current state of our state machine  "},{"title":"GetPreviousState​","type":1,"pageTitle":"Transition","url":"/RobloxStateMachine/api/Transition#GetPreviousState","content":"&lt;/&gt; Transition:GetPreviousState() → string Gets the previous state of our state machine  "},{"title":"ChangeData​","type":1,"pageTitle":"Transition","url":"/RobloxStateMachine/api/Transition#ChangeData","content":"&lt;/&gt; Transition:ChangeData( index: string, newValue: any ) → () Changing data request. You can also just Get the data and change the data at run time. local example: State = State.new(&quot;Blue&quot;) function example:OnEnter(data) self:ChangeData(&quot;color&quot;, Color3.fromRGB(255, 0, 0)) -- Change to red :D data.part.Color = data.color end  "},{"title":"🧹 Organization","type":0,"sectionRef":"#","url":"/RobloxStateMachine/docs/tutorial/Organization","content":"","keywords":""},{"title":"First Create 2 folders​","type":1,"pageTitle":"🧹 Organization","url":"/RobloxStateMachine/docs/tutorial/Organization#first-create-2-folders","content":" We will be using 1 folder to group the states and the second one to group the transitions! Now let's start by making 2 states and 2 transitions. "},{"title":"Create 2 ModuleScripts in each folder as the following example​","type":1,"pageTitle":"🧹 Organization","url":"/RobloxStateMachine/docs/tutorial/Organization#create-2-modulescripts-in-each-folder-as-the-following-example","content":" In this example we will be creating a state machine that manages the color of a part! it will have 2 states: a red and a blue colour. So we want two states: Blue and Red. We also want to make 2 transitions that will allow us to go from blue to red and from red to blue! "},{"title":"Create a Part and call it \"myPart\"​","type":1,"pageTitle":"🧹 Organization","url":"/RobloxStateMachine/docs/tutorial/Organization#create-a-part-and-call-it-mypart","content":"We will be creating a part in the workspace and use it as an example to how we can make/use the StateMachine "},{"title":"🔚 Final Steps","type":0,"sectionRef":"#","url":"/RobloxStateMachine/docs/tutorial/Finish","content":"","keywords":""},{"title":"7. Watch and enjoy!​","type":1,"pageTitle":"🔚 Final Steps","url":"/RobloxStateMachine/docs/tutorial/Finish#7-watch-and-enjoy","content":"Now that we have finally done all of this you can see it in action! Just press play and enjoy seeing the State Machine Working! Had problems during the tutorial? Check the copy unlocked place here:https://www.roblox.com/games/13401789032/RobloxStateMachine-Copy-Unlocked "},{"title":"🤖🔄 State Machine","type":0,"sectionRef":"#","url":"/RobloxStateMachine/docs/tutorial/StateMachine","content":"🤖🔄 State Machine Now that we have 1 state we can already make our state machine! Don't worry, we will be covering transitions and making our red state next! Now in a server or local script create a state machine with the following code... local ReplicatedStorage = game:GetService(&quot;ReplicatedStorage&quot;) local RobloxStateMachine = require(ReplicatedStorage.RobloxStateMachine) local states = ReplicatedStorage.States -- Reference to our states folder local stateMachine = RobloxStateMachine.new(&quot;Blue&quot;, -- This is the initial state of our machine { require(states.Blue) -- This is an array of our states }, { part = workspace.myPart -- This is the data that our transitions and states will have access to } ) Running the game will now turn out part blue as it will be entering the blue state! If you see we are giving the StateMachine the information about what &quot;part&quot; is. It allows us to access the workspace part from our states and transitions!","keywords":""},{"title":"🔀 Transitions","type":0,"sectionRef":"#","url":"/RobloxStateMachine/docs/tutorial/Transitions","content":"🔀 Transitions Now that we finished our states we want to add the transitions to tell our state machine when should it change the state. Let's open the &quot;ToRed&quot; Lua file that we created early and write the following code: local ReplicatedStorage = game:GetService(&quot;ReplicatedStorage&quot;) local RobloxStateMachine = require(ReplicatedStorage.RobloxStateMachine) local ToRed = RobloxStateMachine.Transition.new(&quot;Red&quot;) -- This means we want to change to the red state -- This will change the part state from blue to red after 5 seconds function ToRed:OnDataChanged(data) if data.timer &lt; 5 then return false -- This means we dont want to change the state else return true -- Return true after 5 seconds end end return ToRed And that's it! This will make our state move from Blue to Red after 5 seconds! Now let's make the code to change our state from Red to blue also after another 5 seconds... local ReplicatedStorage = game:GetService(&quot;ReplicatedStorage&quot;) local RobloxStateMachine = require(ReplicatedStorage.RobloxStateMachine) local ToBlue = RobloxStateMachine.Transition.new(&quot;Blue&quot;) -- This means we want to change to the blue state -- This will change the part state from red to blue after 5 seconds function ToBlue:OnDataChanged(data) if data.timer &lt; 5 then return false -- This means we dont want to change the state else return true -- Return true after 5 seconds end end return ToBlue ","keywords":""},{"title":"📂 Sending Data","type":0,"sectionRef":"#","url":"/RobloxStateMachine/docs/tutorial/ChangeData","content":"📂 Sending Data Something that is very important is to change our State Machine data from within the state. Let's go into the blue state and add a timer, this will tell us how long since we have entered the blue state. It will later help us to transition between the 2 states after X amount of seconds! local ReplicatedStorage = game:GetService(&quot;ReplicatedStorage&quot;) local RobloxStateMachine = require(ReplicatedStorage.RobloxStateMachine) local Blue = RobloxStateMachine.State.new(&quot;Blue&quot;) -- The name of our state function Blue:OnInit() print(&quot;Blue Init!&quot;) end function Blue:OnEnter(data) print(&quot;Blue Enter!&quot;) data.timer = 0 -- Create timer in data data.part.Color = Color3.fromRGB(0, 0, 255) -- Change color to blue! end function Blue:OnHeartbeat(data, deltatime) -- All functions receive data as the first parameter data.timer += deltatime end function Blue:OnLeave() print(&quot;Blue Leave!&quot;) end return Blue Great now we completely finished our blue state! Now let's just copy paste the blue state into the red state and change the colour to Red and the name of the state from Blue to &quot;Red&quot;. local ReplicatedStorage = game:GetService(&quot;ReplicatedStorage&quot;) local RobloxStateMachine = require(ReplicatedStorage.RobloxStateMachine) local Red = RobloxStateMachine.State.new(&quot;Red&quot;) -- The name of our state function Red:OnInit() print(&quot;Red Init!&quot;) end function Red:OnEnter(data) print(&quot;Red Enter!&quot;) data.timer = 0 -- Create timer in data data.part.Color = Color3.fromRGB(255, 0, 0) -- Change color to red! end function Red:OnHeartbeat(data, deltatime) -- All functions receive data as the first parameter data.timer += deltatime end function Red:OnLeave() print(&quot;Red Leave!&quot;) end return Red Don't forget to add the red state to our state machine! RobloxStateMachine.new(&quot;Blue&quot;, { require(states.Blue), require(states.Red) }, { part = workspace.myPart } ) ","keywords":""},{"title":"🔵 States","type":0,"sectionRef":"#","url":"/RobloxStateMachine/docs/tutorial/States","content":"🔵 States Now that we organized our files let's setup the states first! We will start by making a simple state template inside of the Blue file! local ReplicatedStorage = game:GetService(&quot;ReplicatedStorage&quot;) local RobloxStateMachine = require(ReplicatedStorage.RobloxStateMachine) local Blue = RobloxStateMachine.State.new(&quot;Blue&quot;) -- The name of our state return Blue This creates and returns a state called Blue. Now let's make it change the color of our part to blue when it enters this state. Let's also print all life-cycles to have an idea of what is going on! local ReplicatedStorage = game:GetService(&quot;ReplicatedStorage&quot;) local RobloxStateMachine = require(ReplicatedStorage.RobloxStateMachine) local Blue = RobloxStateMachine.State.new(&quot;Blue&quot;) -- The name of our state function Blue:OnInit() -- This gets called as soon as the state machine is created print(&quot;Blue Init!&quot;) end function Blue:OnEnter(data) -- Called whenever the state changes into &quot;Blue&quot; print(&quot;Blue Enter!&quot;) -- Could also write: self.Data.part.Color data.part.Color = Color3.fromRGB(0, 0, 255) -- Change color to blue! end function Blue:OnHeartbeat() -- Called every heartbeat end function Blue:OnLeave() -- Called whenever the state is left even if target gets destroyed print(&quot;Blue Leave!&quot;) end return Blue This will turn our part blue when it enters the blue state! Are you confused about where the &quot;data.part&quot; comes from? Don't worry, we're getting right into that next!","keywords":""}]