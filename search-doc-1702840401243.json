[{"title":"📂 Load Directories","type":0,"sectionRef":"#","url":"/RobloxStateMachine/docs/AdvancedConcepts/loadDirectories","content":"📂 Load Directories There's a helpful method that allows us to easily load states and transitions called :LoadDirectories. --[[ - src - server - Example - States - Blue.lua - Default.lua ]] local exampleStateMachine = RobloxStateMachine.new( &quot;Default&quot;, RobloxStateMachine:LoadDirectory(script.Example.States), {} ) This code will load all the states from the Example folder into the state machine. And if we want to be more specific we can send the files names as the third argument! local exampleStateMachine = RobloxStateMachine.new( &quot;Default&quot;, RobloxStateMachine:LoadDirectory(script.Example.States, {&quot;Default&quot;}), -- This will only load the Default state! ) ","keywords":""},{"title":"🚀Getting Started","type":0,"sectionRef":"#","url":"/RobloxStateMachine/docs/gettingStarted","content":"","keywords":""},{"title":"📦 Installing​","type":1,"pageTitle":"🚀Getting Started","url":"/RobloxStateMachine/docs/gettingStarted#-installing","content":"RobloxStateMachine can be installed in different ways, depending on your project's needs. Choose the method that suits you best: 🐶 Wally🔨Studio🐙GitHub Watch wally's page robloxstatemachine = &quot;prooheckcp/robloxstatemachine@&gt;0.0.0, &lt;10.0.0&quot;  🚀 Basic Usage Once you have RobloxStateMachine installed, you can start using it in your project. Here's a basic example of how to use it: local ReplicatedStorage = game:GetService(&quot;ReplicatedStorage&quot;) local RobloxStateMachine = require(ReplicatedStorage.RobloxStateMachine) local exampleStateMachine = RobloxStateMachine.new( &quot;InitialState&quot;, -- Sets our initial state to &quot;InitialState&quot; RobloxStateMachine:LoadDirectory( script.Example.States, {&quot;Blue&quot;, &quot;Default&quot;}), -- &quot;Loads the states called &quot;Blue&quot; and &quot;Default&quot; { part = workspace.Example, -- Sends a reference to a part from workspace into the state machine time = tick(), -- Sends the current tick dummyData = &quot;Hello World&quot;, -- Sends a string } )  Looks a bit confusing at the first glance and for that reason we will be showing a very basic example of an implementation. "},{"title":"🤔About","type":0,"sectionRef":"#","url":"/RobloxStateMachine/docs/intro","content":"","keywords":""},{"title":"🔍Why Choose RobloxStateMachine​","type":1,"pageTitle":"🤔About","url":"/RobloxStateMachine/docs/intro#why-choose-robloxstatemachine","content":""},{"title":"🏗️Structure​","type":1,"pageTitle":"🤔About","url":"/RobloxStateMachine/docs/intro#️structure","content":"RSM breaks down the complete logic of an AI into multiple fractions or files. This allows for developers to isolate their code and only work on one logic at a time making it easier to navigate thru large code bases without losing track of their work! "},{"title":"🔌Extensible​","type":1,"pageTitle":"🤔About","url":"/RobloxStateMachine/docs/intro#extensible","content":"With this library it's very easy to add more states and transitions as your project evolves without the need to understand/go thru existing code. "},{"title":"🔧🧹Maintenance​","type":1,"pageTitle":"🤔About","url":"/RobloxStateMachine/docs/intro#maintenance","content":"This library is heavily maintained and will continue to be for a very long time! If any bug ever gets found or feature is requested it will be updated as soon as possible. "},{"title":"🗡️Battle-Scarred​","type":1,"pageTitle":"🤔About","url":"/RobloxStateMachine/docs/intro#️battle-scarred","content":"This library has already been battle-scarred. It was used in many projects many of them amounting many million visits and never broke or had any bug at all. "},{"title":"🔚 Final Steps","type":0,"sectionRef":"#","url":"/RobloxStateMachine/docs/tutorial/Finish","content":"","keywords":""},{"title":"7. Watch and enjoy!​","type":1,"pageTitle":"🔚 Final Steps","url":"/RobloxStateMachine/docs/tutorial/Finish#7-watch-and-enjoy","content":"Now that we have finally done all of this you can see it in action! Just press play and enjoy seeing the State Machine Working! Had problems during the tutorial? Check the copy unlocked place here:https://www.roblox.com/games/13401789032/RobloxStateMachine-Copy-Unlocked "},{"title":"📂 Sending Data","type":0,"sectionRef":"#","url":"/RobloxStateMachine/docs/tutorial/ChangeData","content":"📂 Sending Data Something that is very important is to change our State Machine data from within the state. Let's go into the blue state and add a timer, this will tell us how long since we have entered the blue state. It will later help us to transition between the 2 states after X amount of seconds! local ReplicatedStorage = game:GetService(&quot;ReplicatedStorage&quot;) local RobloxStateMachine = require(ReplicatedStorage.RobloxStateMachine) local Blue = RobloxStateMachine.State.new(&quot;Blue&quot;) -- The name of our state function Blue:OnInit() print(&quot;Blue Init!&quot;) end function Blue:OnEnter(data) print(&quot;Blue Enter!&quot;) data.timer = 0 -- Create timer in data data.part.Color = Color3.fromRGB(0, 0, 255) -- Change color to blue! end function Blue:OnHeartbeat(data, deltatime) -- All functions receive data as the first parameter data.timer += deltatime end function Blue:OnLeave() print(&quot;Blue Leave!&quot;) end return Blue Great now we completely finished our blue state! Now let's just copy paste the blue state into the red state and change the colour to Red and the name of the state from Blue to &quot;Red&quot;. local ReplicatedStorage = game:GetService(&quot;ReplicatedStorage&quot;) local RobloxStateMachine = require(ReplicatedStorage.RobloxStateMachine) local Red = RobloxStateMachine.State.new(&quot;Red&quot;) -- The name of our state function Red:OnInit() print(&quot;Red Init!&quot;) end function Red:OnEnter(data) print(&quot;Red Enter!&quot;) data.timer = 0 -- Create timer in data data.part.Color = Color3.fromRGB(255, 0, 0) -- Change color to red! end function Red:OnHeartbeat(data, deltatime) -- All functions receive data as the first parameter data.timer += deltatime end function Red:OnLeave() print(&quot;Red Leave!&quot;) end return Red Don't forget to add the red state to our state machine! RobloxStateMachine.new(&quot;Blue&quot;, { require(states.Blue), require(states.Red) }, { part = workspace.myPart } ) ","keywords":""},{"title":"🧹 Organization","type":0,"sectionRef":"#","url":"/RobloxStateMachine/docs/tutorial/Organization","content":"","keywords":""},{"title":"First Create 2 folders​","type":1,"pageTitle":"🧹 Organization","url":"/RobloxStateMachine/docs/tutorial/Organization#first-create-2-folders","content":" We will be using 1 folder to group the states and the second one to group the transitions! Now let's start by making 2 states and 2 transitions. "},{"title":"Create 2 ModuleScripts in each folder as the following example​","type":1,"pageTitle":"🧹 Organization","url":"/RobloxStateMachine/docs/tutorial/Organization#create-2-modulescripts-in-each-folder-as-the-following-example","content":" In this example we will be creating a state machine that manages the color of a part! it will have 2 states: a red and a blue colour. So we want two states: Blue and Red. We also want to make 2 transitions that will allow us to go from blue to red and from red to blue! "},{"title":"Create a Part and call it \"myPart\"​","type":1,"pageTitle":"🧹 Organization","url":"/RobloxStateMachine/docs/tutorial/Organization#create-a-part-and-call-it-mypart","content":"We will be creating a part in the workspace and use it as an example to how we can make/use the StateMachine "},{"title":"🤖🔄 State Machine","type":0,"sectionRef":"#","url":"/RobloxStateMachine/docs/tutorial/StateMachine","content":"🤖🔄 State Machine Now that we have 1 state we can already make our state machine! Don't worry, we will be covering transitions and making our red state next! Now in a server or local script create a state machine with the following code... local ReplicatedStorage = game:GetService(&quot;ReplicatedStorage&quot;) local RobloxStateMachine = require(ReplicatedStorage.RobloxStateMachine) local states = ReplicatedStorage.States -- Reference to our states folder local stateMachine = RobloxStateMachine.new(&quot;Blue&quot;, -- This is the initial state of our machine { require(states.Blue) -- This is an array of our states }, { part = workspace.myPart -- This is the data that our transitions and states will have access to } ) Running the game will now turn out part blue as it will be entering the blue state! If you see we are giving the StateMachine the information about what &quot;part&quot; is. It allows us to access the workspace part from our states and transitions!","keywords":""},{"title":"🔀 Transitions","type":0,"sectionRef":"#","url":"/RobloxStateMachine/docs/tutorial/Transitions","content":"🔀 Transitions Now that we finished our states we want to add the transitions to tell our state machine when should it change the state. Let's open the &quot;ToRed&quot; Lua file that we created early and write the following code: local ReplicatedStorage = game:GetService(&quot;ReplicatedStorage&quot;) local RobloxStateMachine = require(ReplicatedStorage.RobloxStateMachine) local ToRed = RobloxStateMachine.Transition.new(&quot;Red&quot;) -- This means we want to change to the red state -- This will change the part state from blue to red after 5 seconds function ToRed:OnDataChanged(data) if data.timer &lt; 5 then return false -- This means we dont want to change the state else return true -- Return true after 5 seconds end end return ToRed And that's it! This will make our state move from Blue to Red after 5 seconds! Now let's make the code to change our state from Red to blue also after another 5 seconds... local ReplicatedStorage = game:GetService(&quot;ReplicatedStorage&quot;) local RobloxStateMachine = require(ReplicatedStorage.RobloxStateMachine) local ToBlue = RobloxStateMachine.Transition.new(&quot;Blue&quot;) -- This means we want to change to the blue state -- This will change the part state from red to blue after 5 seconds function ToBlue:OnDataChanged(data) if data.timer &lt; 5 then return false -- This means we dont want to change the state else return true -- Return true after 5 seconds end end return ToBlue ","keywords":""},{"title":"🔵 States","type":0,"sectionRef":"#","url":"/RobloxStateMachine/docs/tutorial/States","content":"🔵 States Now that we organized our files let's setup the states first! We will start by making a simple state template inside of the Blue file! local ReplicatedStorage = game:GetService(&quot;ReplicatedStorage&quot;) local RobloxStateMachine = require(ReplicatedStorage.RobloxStateMachine) local Blue = RobloxStateMachine.State.new(&quot;Blue&quot;) -- The name of our state return Blue This creates and returns a state called Blue. Now let's make it change the color of our part to blue when it enters this state. Let's also print all life-cycles to have an idea of what is going on! local ReplicatedStorage = game:GetService(&quot;ReplicatedStorage&quot;) local RobloxStateMachine = require(ReplicatedStorage.RobloxStateMachine) local Blue = RobloxStateMachine.State.new(&quot;Blue&quot;) -- The name of our state function Blue:OnInit() -- This gets called as soon as the state machine is created print(&quot;Blue Init!&quot;) end function Blue:OnEnter(data) -- Called whenever the state changes into &quot;Blue&quot; print(&quot;Blue Enter!&quot;) -- Could also write: self.Data.part.Color data.part.Color = Color3.fromRGB(0, 0, 255) -- Change color to blue! end function Blue:OnHeartbeat() -- Called every heartbeat end function Blue:OnLeave() -- Called whenever the state is left even if target gets destroyed print(&quot;Blue Leave!&quot;) end return Blue This will turn our part blue when it enters the blue state! Are you confused about where the &quot;data.part&quot; comes from? Don't worry, we're getting right into that next!","keywords":""}]